#####################################################################
#
# Expected input:
#   - jsm_issue_id: a key to the Jira Service Management issue
#
# Description: Fetches required information from the JSM issue,
# then deploys a new SOC Environment.
#
#####################################################################
- hosts: localhost
  connection: local
  gather_facts: false
  module_defaults:
    community.general.jira:
      uri: "{{ jsm_api }}"
      username: "{{ lookup('env', 'ATLASSIAN_API_USERNAME') }}"
      password: "{{ lookup('env', 'ATLASSIAN_API_TOKEN') }}"

    community.kubernetes.k8s_auth:
      host: "{{ lookup('env', 'OPENSHIFT_API_URL') }}"
      validate_certs: "{{ not (lookup('env', 'OPENSHIFT_API_INSECURE_CERTS') | bool) }}"

    community.kubernetes.k8s_info:
      host: "{{ lookup('env', 'OPENSHIFT_API_URL') }}"
      validate_certs: "{{ not (lookup('env', 'OPENSHIFT_API_INSECURE_CERTS') | bool) }}"

    community.kubernetes.k8s:
      host: "{{ lookup('env', 'OPENSHIFT_API_URL') }}"
      validate_certs: "{{ not (lookup('env', 'OPENSHIFT_API_INSECURE_CERTS') | bool) }}"

  vars:
    jira_var_lookups:
      soc_project_name: 'customfield_10054'
      soc_env: 'customfield_10057'

  tasks:
  - include_tasks: tasks/jira-fetch-issue.yml

  - name: soc - create soc env name
    set_fact:
      soc_name: "soc-{{ jira_field_soc_project_name | lower }}-{{ jira_field_soc_env.value | lower | regex_replace('[^a-zA-Z0-9 ]','') | regex_replace(' ','-') }}"

  - name: jsm - add comment to ticket
    when:
      - 'jira_issue_status.name|lower == "waiting for support"'
    include_tasks: tasks/jira-comment.yml
    vars:
      transitions:
        - { status: "In Progress", transition: "In progress" }
      comment: |
        Hello!

        Your request to provision a new SOC environment has been received.

        It will be automatically rolled out. Please be patient, as this can take between 30 minutes and an hour to complete.

        Once the software factory is online I'll add another comment on this ticket, advising you of how you can get started.

        Thanks.

  - include_tasks: tasks/checkout-state-repo.yml
    vars:
      key_file: "{{ lookup('env', 'SSH_PRIVATE_KEY_FILE') }}"

  - set_fact:
      applications_dir: "{{ scm_dir }}/socs"
      soc_dir: "{{ scm_dir }}/socs/{{ soc_name }}"

  - name: soc - ensure directories exist
    file:
      path: "{{ item }}"
      state: directory
    loop:
      - "{{ applications_dir }}"
      - "{{ soc_dir }}"

  - name: soc - create argocd application
    template:
      src: "soc-application.yml.j2"
      dest: "{{ applications_dir }}/{{ soc_name }}.application.yml"
    register: application_resource
    vars:
      application_name: "{{ soc_name }}"
      repo_url: "{{ scm_state_repo }}"
      repo_revision: "{{ scm_branch }}"
      repo_path: "socs/{{ soc_name }}"
      namespace: "{{ soc_name }}"
 
  - name: soc - template resources for SOC environment
    template:
      src: "{{ item }}"
      dest: "{{ soc_dir }}"
    vars:
      namespace: "{{ soc_name }}"
      repo_url: "{{ scm_state_repo }}"
      repo_revision: "{{ scm_branch }}"
      repo_path: "socs/{{ soc_name }}"
    register: template_resources
    with_fileglob:
      - "templates/soc/*.yaml"

  - name: soc - get kubernetes auth token
    community.kubernetes.k8s_auth:
      username: "{{ lookup('env', 'OPENSHIFT_API_USERNAME') }}"
      password: "{{ lookup('env',' OPENSHIFT_API_PASSWORD') }}"
    register: k8s_auth_results

  - name: soc - create namespace
    community.kubernetes.k8s:
      api_version: v1
      kind: Namespace
      name: "{{ soc_name }}"
      state: present
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"

  - name: soc - create AWS credential secret
    community.kubernetes.k8s:
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: aws-credentials
          namespace: "{{ soc_name }}"
        data:
          credentials: "{{ data | b64encode }}"
    vars:
      credfile: "{{ lookup('env', 'AWS_CREDENTIALS_FILE') }}"
      data: |-
        access_key={{ lookup('ini', 'aws_access_key_id section=default file=' + credfile) }}
        secret_key={{ lookup('ini', 'aws_secret_access_key section=default file=' + credfile) }}
        region=ap-southeast-2

  - when:
    - template_resources.changed or application_resource.changed
    block:

    - include_tasks: tasks/git-commit-push.yml
      vars:
        key_file: "{{ lookup('env', 'SSH_PRIVATE_KEY_FILE') }}"
        commit_message: "Commit resources for SOC environment '{{soc_name}}' from service request {{ jsm_issue_id }}"

  - name: soc - wait for ArgoCD applications to sync (10 sec poll, up to 5 minutes)
    community.kubernetes.k8s_info:
      api_version: argoproj.io/v1alpha1
      kind: Application
      name: "{{ item }}"
      namespace: "argocd"
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    register: argocd_app
    until: 
      - argocd_app.resources | length > 0
      - argocd_app.resources[0].status is defined
      - "argocd_app.resources[0].status.sync.status == 'Synced'"
    loop:
      - "{{ soc_name }}"
      - "{{ soc_name }}-nifi"
    delay: 10
    retries: 30

  - name: soc - get NiFi route
    community.kubernetes.k8s_info:
      api_version: route.openshift.io/v1
      kind: Route
      namespace: "{{ soc_name }}"
      name: "{{ soc_name }}-nifi"
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    register: nifi_route
    until:
      - nifi_route.resources|length == 1
    delay: 10
    retries: 30

  - set_fact:
      nifi_api: "{% if spec.port.targetPort == 'http' %}http://{%else%}https://{%endif%}{{ spec.host }}/nifi-api"
    vars:
      spec: "{{ nifi_route.resources[0].spec }}"

  - name: soc - wait for NiFi API to respond
    uri:
      url: "{{ nifi_api }}/system-diagnostics"
    register: url_test
    until:
      - url_test.status == 200

  - name: soc - get list of NiFi templates
    uri:
      url: "{{ nifi_api }}/resources/"
    register: resources

  - name: jsm - comment and close
    include_tasks: tasks/jira-comment.yml
    vars:
      transitions:
        - { transition: "Resolve this issue", status: "Resolved" }
        - { transition: "Close", status: "Closed" }
      comment: |
        Hello!

        Your new SOC environment has been provisioned successfully.
